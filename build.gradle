buildscript {
	dependencies {
		classpath "se.transmode.gradle:gradle-docker:1.2"
	}
	apply from: "${project.projectDir.path}/pivy.gradle"
	def missingLibs = []
	pivy.libs.each {
		if (!file(pivy.repo.absolutePath + '/' + it.group + '/' + it.name + '/' + it.version).exists()) {
			missingLibs << it
		}
	}
	if (!missingLibs.empty) {
		new ImporterWrapper(
			repo: pivy.repo,
			dependencies: missingLibs,
			replace: pivy.replace).runAction()
	}
}


plugins {
	id "com.linkedin.python-sdist" version "0.5.1"
	id "org.ajoberstar.grgit" version "1.5.1"
}

apply plugin: 'docker'
apply plugin: 'org.ajoberstar.grgit'


python.details.pythonVersion = pythonVersion


def pivyLayoutPattern  = {
	ivy pivyIvyPattern
	artifact pivyArtifactPattern
	m2compatible = true
}

repositories {
	ivy {
		name "pypiLocal"
		url "file://${project.buildDir.path}/pythonIvy"
		layout "pattern", pivyLayoutPattern
	}
}

dependencies {
	python "pypi:pika:0.10.0"
	python "pypi:PyMySQL:0.7.9"
	python "pypi:Jinja2:2.8"
	python "pypi:schedule:0.3.2"
    python "pypi:pyaml:16.12.2"
	python "pypi:pg8000:1.10.6"
	python "pypi:pytransliter:1.0.1"
}


uploadArchives {
	repositories {
		ivy {
			name "pypiIntr"
			url pypiIntrUploadUrl
			credentials {
				username pypiIntrUsername
				password pypiIntrPassword
			}
			layout "pattern", pivyLayoutPattern
		}
	}
}


file("docker").listFiles().each { def dockerFile=file(it) ->
	tasks.create(
			name: "buildDocker${dockerFile.getName().replace("Dockerfile","")}",
			type: Docker,
			dependsOn: build) {
		def sdistFile = file(tasks.packageSdist.getSdistOutput())
		def git = org.ajoberstar.grgit.Grgit.open(file('.'))
		needUploadArchive = project.needUploadArchive
		tagVersion = git.head().abbreviatedId
		if (needUploadArchive == "true") {
			dependsOn uploadArchives
		}
		description = "Build Docker image using ${dockerFile} and push it to ${dockerRegistry} with :${tagVersion} tag"
		push = true
		registry = dockerRegistry
		applicationName = project.name + '-' + dockerFile.getName().replace("Dockerfile","").toLowerCase() 
		dockerfile = file("${buildDir}/Dockerfile")
		doFirst {
			copy {
				from dockerFile
				into buildDir
				rename(dockerFile.getName(), "Dockerfile")
				expand(sdistName: sdistFile.getName())
			}
			copy {
				from sdistFile
				into stageDir 
			}
		}
	}
}


task cleanSdist(type: Delete) {
	description = "Delete sdist files"
	delete tasks.packageSdist.getSdistOutput()
}

task buildDocker {
	description = "Build Docker images from dockerfiles in ./docker/ and push them to ${dockerRegistry}"
	tasks.each {
		if (it.name.startsWith("buildDocker") && it.name != "buildDocker") {
			dependsOn it.name
		}
	}
}

packageSdist.dependsOn("cleanSdist")
