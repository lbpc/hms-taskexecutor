buildscript {
	repositories {
		maven {
			url 'http://maven.intr'
		}
	}
	dependencies {
		classpath("se.transmode.gradle:gradle-docker:1.2")
		classpath("com.avast.gradle:docker-compose-gradle-plugin:0.3.9")
		classpath("ru.majordomo:copycompose:1.+")
	}
}

plugins {
	id "com.linkedin.python-sdist" version "0.3.9"
	id "org.ajoberstar.grgit" version "1.5.1"
}

apply plugin: 'docker'
apply plugin: 'docker-compose'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'ru.majordomo.copycompose'

dependencies {
	python "pypi:pika:0.10.0"
	python "pypi:PyMySQL:0.7.9"
	python "pypi:Jinja2:2.8"
}

python.details.pythonVersion = pythonVersion

def pypiIntrLayoutPattern  = {
	ivy pypiIntrIvyPattern
	artifact pypiIntrArtifactPattern
	m2compatible = true
}

def pypiIntrCredentials = {
	username pypiIntrUsername
	password pypiIntrPassword
}

repositories {
	pyGradlePyPi()
	ivy {
		name "pypiIntr"
		url pypiIntrUrl
		credentials pypiIntrCredentials
		layout "pattern", pypiIntrLayoutPattern
	}
}

uploadArchives {
	repositories {
		ivy {
			name "pypiIntr"
			url pypiIntrUrl + "/pypi"
			credentials pypiIntrCredentials
			layout "pattern", pypiIntrLayoutPattern
		}
	}
}

task cleanSdist(type: Delete) {
	delete tasks.packageSdist.getSdistOutput()
}

file("docker").listFiles().each { def dockerFile=file(it) ->
	tasks.create(
			name: "buildDocker${dockerFile.getName().replace("Dockerfile","")}",
			type: Docker,
			dependsOn: uploadArchives) {
		def sdistFile = file(tasks.packageSdist.getSdistOutput())
		def git = org.ajoberstar.grgit.Grgit.open(file('.'))
		tagVersion = git.branch.getCurrent().getName().replaceAll("refs/heads/","")
		if(tagVersion == "HEAD") {
			tagVersion = project.projectBranch
		}
		description = "Build Docker image using ${dockerFile} and push it to ${dockerRegistry} with :${tagVersion} tag"
		push = true
		registry = dockerRegistry
		applicationName = project.name 
		dockerfile = file("${buildDir}/Dockerfile")
		doFirst {
			copy {
				from dockerFile
				into buildDir
				rename '^$', 'Dockerfile'
				expand(sdistName: sdistFile.getName())
			}
			copy {
				from sdistFile
				into stageDir 
			}
		}
	}
}

task buildDocker {
	description = "Build Docker images from dockerfiles in ./docker/ and push them to ${dockerRegistry}"
	tasks.each {
		if (it.name.startsWith("buildDocker") && it.name != "buildDocker") {
			dependsOn it.name
		}
	}
}

task cloneCompose(type: Exec) {
	doFirst {
		delete 'docker-compose'
	}
	commandLine 'git', 'clone', 'git@gitlab.intr:hms/docker-compose.git'
}

task composePull(type: Exec) {
	commandLine 'docker-compose', 'pull'
}

task delCompose(type: Delete) {
	delete 'docker-compose'
}


packageSdist.dependsOn("cleanSdist")
cookCompose.dependsOn("cloneCompose")
composePull.dependsOn("cookCompose")
composeUp.dependsOn("composePull")
composeUp.finalizedBy delCompose

clean.doFirst {
	delete "${rootDir}/docker-compose"
	delete "${rootDir}/docker-compose.yml"
}

composeDown {
	doLast { delete 'docker-compose.yml' }
}
